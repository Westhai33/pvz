# 1. Запускаете ранее установленный Docker
# 2. Скачиваете данный файл к себе на компьютер
# 3. Переходите в директорию с файлом docker-compose.yml
#  - Поднять базу данных можно при помощи команды: `docker-compose -f docker-compose.yml up -d`
#  - Остановить базу данных можно при помощи команды: `docker-compose -f docker-compose.yml stop`
#  - Проверить статус контейнера можно при помощи команды: `docker-compose -f docker-compose.yml ps`
# http://localhost:8081/?url=/openapi.yaml
version: '3.8'

volumes:
  postgresql_data:
  kafka_data:
  redis_data:
  prometheus_data:

networks:
  kafka_network:
    driver: bridge

services:
  route256_db:
    image: postgres:15-alpine
    container_name: route256_db
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - kafka_network

  redis:
    image: redis:latest
    container_name: redis_cache
    ports:
      - "6379:6379"
    command: [ "redis-server", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru" ]
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - kafka_network

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger_ui
    ports:
      - "8081:8080"
    environment:
      SWAGGER_JSON: /api/v1/openapi.yaml
    volumes:
      - ./internal/api/v1:/api/v1
    restart: always
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/var/lib/kafka/logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka_data:/var/lib/kafka
    networks:
      - kafka_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    depends_on:
      - kafka
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - kafka_network

  kafka-init-topics:
    container_name: kafka_init
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka:29092 1 30 && \
      kafka-topics --create --topic pvz.events-log --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092'"
    networks:
      - kafka_network

  notifier:
    build:
      context: .
      dockerfile: ./cmd/notifier/Dockerfile
    environment:
      KAFKA_BROKERS: "kafka:29092"
      KAFKA_GROUP_ID: "notifier_group"
      KAFKA_TOPIC: "pvz.events-log"
    depends_on:
      - kafka
    networks:
      - kafka_network
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kafka_network

  jaeger:
    image: jaegertracing/all-in-one:1.41
    container_name: jaeger
    restart: always
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Collector HTTP
      - "14250:14250"  # gRPC
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    networks:
      - kafka_network