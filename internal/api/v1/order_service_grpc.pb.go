// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: order_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APIService_CreateUser_FullMethodName              = "/api.v1.APIService/CreateUser"
	APIService_GetUser_FullMethodName                 = "/api.v1.APIService/GetUser"
	APIService_GetAllUsers_FullMethodName             = "/api.v1.APIService/GetAllUsers"
	APIService_UpdateUser_FullMethodName              = "/api.v1.APIService/UpdateUser"
	APIService_DeleteUser_FullMethodName              = "/api.v1.APIService/DeleteUser"
	APIService_GetUserName_FullMethodName             = "/api.v1.APIService/GetUserName"
	APIService_CheckUserExists_FullMethodName         = "/api.v1.APIService/CheckUserExists"
	APIService_CreateOrder_FullMethodName             = "/api.v1.APIService/CreateOrder"
	APIService_GetOrder_FullMethodName                = "/api.v1.APIService/GetOrder"
	APIService_GetAllOrders_FullMethodName            = "/api.v1.APIService/GetAllOrders"
	APIService_UpdateOrder_FullMethodName             = "/api.v1.APIService/UpdateOrder"
	APIService_DeleteOrder_FullMethodName             = "/api.v1.APIService/DeleteOrder"
	APIService_GetOrdersByUserID_FullMethodName       = "/api.v1.APIService/GetOrdersByUserID"
	APIService_IssueOrder_FullMethodName              = "/api.v1.APIService/IssueOrder"
	APIService_SeedOrders_FullMethodName              = "/api.v1.APIService/SeedOrders"
	APIService_CreatePackaging_FullMethodName         = "/api.v1.APIService/CreatePackaging"
	APIService_GetPackaging_FullMethodName            = "/api.v1.APIService/GetPackaging"
	APIService_GetAllPackaging_FullMethodName         = "/api.v1.APIService/GetAllPackaging"
	APIService_UpdatePackaging_FullMethodName         = "/api.v1.APIService/UpdatePackaging"
	APIService_DeletePackaging_FullMethodName         = "/api.v1.APIService/DeletePackaging"
	APIService_CreateReturn_FullMethodName            = "/api.v1.APIService/CreateReturn"
	APIService_GetReturns_FullMethodName              = "/api.v1.APIService/GetReturns"
	APIService_GetReturnByOrderID_FullMethodName      = "/api.v1.APIService/GetReturnByOrderID"
	APIService_GetReturnsByUserID_FullMethodName      = "/api.v1.APIService/GetReturnsByUserID"
	APIService_UpdateReturn_FullMethodName            = "/api.v1.APIService/UpdateReturn"
	APIService_DeleteReturn_FullMethodName            = "/api.v1.APIService/DeleteReturn"
	APIService_ProcessReturn_FullMethodName           = "/api.v1.APIService/ProcessReturn"
	APIService_CreateReturnReason_FullMethodName      = "/api.v1.APIService/CreateReturnReason"
	APIService_GetReturnReason_FullMethodName         = "/api.v1.APIService/GetReturnReason"
	APIService_GetAllReturnReasons_FullMethodName     = "/api.v1.APIService/GetAllReturnReasons"
	APIService_UpdateReturnReason_FullMethodName      = "/api.v1.APIService/UpdateReturnReason"
	APIService_DeleteReturnReason_FullMethodName      = "/api.v1.APIService/DeleteReturnReason"
	APIService_CheckReturnReasonExists_FullMethodName = "/api.v1.APIService/CheckReturnReasonExists"
	APIService_CreateStatus_FullMethodName            = "/api.v1.APIService/CreateStatus"
	APIService_GetStatusByID_FullMethodName           = "/api.v1.APIService/GetStatusByID"
	APIService_GetAllStatuses_FullMethodName          = "/api.v1.APIService/GetAllStatuses"
	APIService_UpdateStatus_FullMethodName            = "/api.v1.APIService/UpdateStatus"
	APIService_DeleteStatus_FullMethodName            = "/api.v1.APIService/DeleteStatus"
	APIService_GetStatusByName_FullMethodName         = "/api.v1.APIService/GetStatusByName"
	APIService_CheckStatusExists_FullMethodName       = "/api.v1.APIService/CheckStatusExists"
	APIService_SetWorkerCount_FullMethodName          = "/api.v1.APIService/SetWorkerCount"
)

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Описание объединенного сервиса APIService
type APIServiceClient interface {
	// ------------- Users -------------
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserName(ctx context.Context, in *GetUserNameRequest, opts ...grpc.CallOption) (*GetUserNameResponse, error)
	CheckUserExists(ctx context.Context, in *CheckUserExistsRequest, opts ...grpc.CallOption) (*CheckUserExistsResponse, error)
	// ------------- Orders -------------
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	GetAllOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOrdersByUserID(ctx context.Context, in *GetOrdersByUserIDRequest, opts ...grpc.CallOption) (*GetOrdersByUserIDResponse, error)
	IssueOrder(ctx context.Context, in *IssueOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SeedOrders(ctx context.Context, in *SeedOrdersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ------------- Packaging -------------
	CreatePackaging(ctx context.Context, in *CreatePackagingRequest, opts ...grpc.CallOption) (*CreatePackagingResponse, error)
	GetPackaging(ctx context.Context, in *GetPackagingRequest, opts ...grpc.CallOption) (*GetPackagingResponse, error)
	GetAllPackaging(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllPackagingResponse, error)
	UpdatePackaging(ctx context.Context, in *UpdatePackagingRequest, opts ...grpc.CallOption) (*UpdatePackagingResponse, error)
	DeletePackaging(ctx context.Context, in *DeletePackagingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ------------- Return -------------
	CreateReturn(ctx context.Context, in *CreateReturnRequest, opts ...grpc.CallOption) (*CreateReturnResponse, error)
	GetReturns(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetReturnsResponse, error)
	GetReturnByOrderID(ctx context.Context, in *GetReturnByOrderIDRequest, opts ...grpc.CallOption) (*GetReturnByOrderIDResponse, error)
	GetReturnsByUserID(ctx context.Context, in *GetReturnsByUserIDRequest, opts ...grpc.CallOption) (*GetReturnsByUserIDResponse, error)
	UpdateReturn(ctx context.Context, in *UpdateReturnRequest, opts ...grpc.CallOption) (*UpdateReturnResponse, error)
	DeleteReturn(ctx context.Context, in *DeleteReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProcessReturn(ctx context.Context, in *ProcessReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ------------- Return Reasons -------------
	CreateReturnReason(ctx context.Context, in *CreateReturnReasonRequest, opts ...grpc.CallOption) (*CreateReturnReasonResponse, error)
	GetReturnReason(ctx context.Context, in *GetReturnReasonRequest, opts ...grpc.CallOption) (*GetReturnReasonResponse, error)
	GetAllReturnReasons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllReturnReasonsResponse, error)
	UpdateReturnReason(ctx context.Context, in *UpdateReturnReasonRequest, opts ...grpc.CallOption) (*UpdateReturnReasonResponse, error)
	DeleteReturnReason(ctx context.Context, in *DeleteReturnReasonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckReturnReasonExists(ctx context.Context, in *CheckReturnReasonExistsRequest, opts ...grpc.CallOption) (*CheckReturnReasonExistsResponse, error)
	// ------------- Statuses -------------
	CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*CreateStatusResponse, error)
	GetStatusByID(ctx context.Context, in *GetStatusByIDRequest, opts ...grpc.CallOption) (*GetStatusByIDResponse, error)
	GetAllStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllStatusesResponse, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStatusByName(ctx context.Context, in *GetStatusByNameRequest, opts ...grpc.CallOption) (*GetStatusByNameResponse, error)
	CheckStatusExists(ctx context.Context, in *CheckStatusExistsRequest, opts ...grpc.CallOption) (*CheckStatusExistsResponse, error)
	// ------------- Worker -------------
	SetWorkerCount(ctx context.Context, in *SetWorkerCountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, APIService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, APIService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, APIService_GetAllUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, APIService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetUserName(ctx context.Context, in *GetUserNameRequest, opts ...grpc.CallOption) (*GetUserNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserNameResponse)
	err := c.cc.Invoke(ctx, APIService_GetUserName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CheckUserExists(ctx context.Context, in *CheckUserExistsRequest, opts ...grpc.CallOption) (*CheckUserExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserExistsResponse)
	err := c.cc.Invoke(ctx, APIService_CheckUserExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, APIService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, APIService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAllOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, APIService_GetAllOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderResponse)
	err := c.cc.Invoke(ctx, APIService_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_DeleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetOrdersByUserID(ctx context.Context, in *GetOrdersByUserIDRequest, opts ...grpc.CallOption) (*GetOrdersByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersByUserIDResponse)
	err := c.cc.Invoke(ctx, APIService_GetOrdersByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) IssueOrder(ctx context.Context, in *IssueOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_IssueOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SeedOrders(ctx context.Context, in *SeedOrdersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_SeedOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreatePackaging(ctx context.Context, in *CreatePackagingRequest, opts ...grpc.CallOption) (*CreatePackagingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePackagingResponse)
	err := c.cc.Invoke(ctx, APIService_CreatePackaging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetPackaging(ctx context.Context, in *GetPackagingRequest, opts ...grpc.CallOption) (*GetPackagingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackagingResponse)
	err := c.cc.Invoke(ctx, APIService_GetPackaging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAllPackaging(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllPackagingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPackagingResponse)
	err := c.cc.Invoke(ctx, APIService_GetAllPackaging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdatePackaging(ctx context.Context, in *UpdatePackagingRequest, opts ...grpc.CallOption) (*UpdatePackagingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePackagingResponse)
	err := c.cc.Invoke(ctx, APIService_UpdatePackaging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeletePackaging(ctx context.Context, in *DeletePackagingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_DeletePackaging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateReturn(ctx context.Context, in *CreateReturnRequest, opts ...grpc.CallOption) (*CreateReturnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReturnResponse)
	err := c.cc.Invoke(ctx, APIService_CreateReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetReturns(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetReturnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReturnsResponse)
	err := c.cc.Invoke(ctx, APIService_GetReturns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetReturnByOrderID(ctx context.Context, in *GetReturnByOrderIDRequest, opts ...grpc.CallOption) (*GetReturnByOrderIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReturnByOrderIDResponse)
	err := c.cc.Invoke(ctx, APIService_GetReturnByOrderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetReturnsByUserID(ctx context.Context, in *GetReturnsByUserIDRequest, opts ...grpc.CallOption) (*GetReturnsByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReturnsByUserIDResponse)
	err := c.cc.Invoke(ctx, APIService_GetReturnsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdateReturn(ctx context.Context, in *UpdateReturnRequest, opts ...grpc.CallOption) (*UpdateReturnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReturnResponse)
	err := c.cc.Invoke(ctx, APIService_UpdateReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteReturn(ctx context.Context, in *DeleteReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_DeleteReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ProcessReturn(ctx context.Context, in *ProcessReturnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_ProcessReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateReturnReason(ctx context.Context, in *CreateReturnReasonRequest, opts ...grpc.CallOption) (*CreateReturnReasonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReturnReasonResponse)
	err := c.cc.Invoke(ctx, APIService_CreateReturnReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetReturnReason(ctx context.Context, in *GetReturnReasonRequest, opts ...grpc.CallOption) (*GetReturnReasonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReturnReasonResponse)
	err := c.cc.Invoke(ctx, APIService_GetReturnReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAllReturnReasons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllReturnReasonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllReturnReasonsResponse)
	err := c.cc.Invoke(ctx, APIService_GetAllReturnReasons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdateReturnReason(ctx context.Context, in *UpdateReturnReasonRequest, opts ...grpc.CallOption) (*UpdateReturnReasonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReturnReasonResponse)
	err := c.cc.Invoke(ctx, APIService_UpdateReturnReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteReturnReason(ctx context.Context, in *DeleteReturnReasonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_DeleteReturnReason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CheckReturnReasonExists(ctx context.Context, in *CheckReturnReasonExistsRequest, opts ...grpc.CallOption) (*CheckReturnReasonExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckReturnReasonExistsResponse)
	err := c.cc.Invoke(ctx, APIService_CheckReturnReasonExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*CreateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStatusResponse)
	err := c.cc.Invoke(ctx, APIService_CreateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetStatusByID(ctx context.Context, in *GetStatusByIDRequest, opts ...grpc.CallOption) (*GetStatusByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusByIDResponse)
	err := c.cc.Invoke(ctx, APIService_GetStatusByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetAllStatuses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStatusesResponse)
	err := c.cc.Invoke(ctx, APIService_GetAllStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, APIService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_DeleteStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetStatusByName(ctx context.Context, in *GetStatusByNameRequest, opts ...grpc.CallOption) (*GetStatusByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusByNameResponse)
	err := c.cc.Invoke(ctx, APIService_GetStatusByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) CheckStatusExists(ctx context.Context, in *CheckStatusExistsRequest, opts ...grpc.CallOption) (*CheckStatusExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckStatusExistsResponse)
	err := c.cc.Invoke(ctx, APIService_CheckStatusExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) SetWorkerCount(ctx context.Context, in *SetWorkerCountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, APIService_SetWorkerCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServiceServer is the server API for APIService service.
// All implementations must embed UnimplementedAPIServiceServer
// for forward compatibility.
//
// Описание объединенного сервиса APIService
type APIServiceServer interface {
	// ------------- Users -------------
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetAllUsers(context.Context, *emptypb.Empty) (*GetAllUsersResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	GetUserName(context.Context, *GetUserNameRequest) (*GetUserNameResponse, error)
	CheckUserExists(context.Context, *CheckUserExistsRequest) (*CheckUserExistsResponse, error)
	// ------------- Orders -------------
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	GetAllOrders(context.Context, *emptypb.Empty) (*GetAllOrdersResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*emptypb.Empty, error)
	GetOrdersByUserID(context.Context, *GetOrdersByUserIDRequest) (*GetOrdersByUserIDResponse, error)
	IssueOrder(context.Context, *IssueOrderRequest) (*emptypb.Empty, error)
	SeedOrders(context.Context, *SeedOrdersRequest) (*emptypb.Empty, error)
	// ------------- Packaging -------------
	CreatePackaging(context.Context, *CreatePackagingRequest) (*CreatePackagingResponse, error)
	GetPackaging(context.Context, *GetPackagingRequest) (*GetPackagingResponse, error)
	GetAllPackaging(context.Context, *emptypb.Empty) (*GetAllPackagingResponse, error)
	UpdatePackaging(context.Context, *UpdatePackagingRequest) (*UpdatePackagingResponse, error)
	DeletePackaging(context.Context, *DeletePackagingRequest) (*emptypb.Empty, error)
	// ------------- Return -------------
	CreateReturn(context.Context, *CreateReturnRequest) (*CreateReturnResponse, error)
	GetReturns(context.Context, *emptypb.Empty) (*GetReturnsResponse, error)
	GetReturnByOrderID(context.Context, *GetReturnByOrderIDRequest) (*GetReturnByOrderIDResponse, error)
	GetReturnsByUserID(context.Context, *GetReturnsByUserIDRequest) (*GetReturnsByUserIDResponse, error)
	UpdateReturn(context.Context, *UpdateReturnRequest) (*UpdateReturnResponse, error)
	DeleteReturn(context.Context, *DeleteReturnRequest) (*emptypb.Empty, error)
	ProcessReturn(context.Context, *ProcessReturnRequest) (*emptypb.Empty, error)
	// ------------- Return Reasons -------------
	CreateReturnReason(context.Context, *CreateReturnReasonRequest) (*CreateReturnReasonResponse, error)
	GetReturnReason(context.Context, *GetReturnReasonRequest) (*GetReturnReasonResponse, error)
	GetAllReturnReasons(context.Context, *emptypb.Empty) (*GetAllReturnReasonsResponse, error)
	UpdateReturnReason(context.Context, *UpdateReturnReasonRequest) (*UpdateReturnReasonResponse, error)
	DeleteReturnReason(context.Context, *DeleteReturnReasonRequest) (*emptypb.Empty, error)
	CheckReturnReasonExists(context.Context, *CheckReturnReasonExistsRequest) (*CheckReturnReasonExistsResponse, error)
	// ------------- Statuses -------------
	CreateStatus(context.Context, *CreateStatusRequest) (*CreateStatusResponse, error)
	GetStatusByID(context.Context, *GetStatusByIDRequest) (*GetStatusByIDResponse, error)
	GetAllStatuses(context.Context, *emptypb.Empty) (*GetAllStatusesResponse, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	DeleteStatus(context.Context, *DeleteStatusRequest) (*emptypb.Empty, error)
	GetStatusByName(context.Context, *GetStatusByNameRequest) (*GetStatusByNameResponse, error)
	CheckStatusExists(context.Context, *CheckStatusExistsRequest) (*CheckStatusExistsResponse, error)
	// ------------- Worker -------------
	SetWorkerCount(context.Context, *SetWorkerCountRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAPIServiceServer()
}

// UnimplementedAPIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServiceServer struct{}

func (UnimplementedAPIServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAPIServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAPIServiceServer) GetAllUsers(context.Context, *emptypb.Empty) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedAPIServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAPIServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAPIServiceServer) GetUserName(context.Context, *GetUserNameRequest) (*GetUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserName not implemented")
}
func (UnimplementedAPIServiceServer) CheckUserExists(context.Context, *CheckUserExistsRequest) (*CheckUserExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserExists not implemented")
}
func (UnimplementedAPIServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedAPIServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedAPIServiceServer) GetAllOrders(context.Context, *emptypb.Empty) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (UnimplementedAPIServiceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedAPIServiceServer) DeleteOrder(context.Context, *DeleteOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedAPIServiceServer) GetOrdersByUserID(context.Context, *GetOrdersByUserIDRequest) (*GetOrdersByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByUserID not implemented")
}
func (UnimplementedAPIServiceServer) IssueOrder(context.Context, *IssueOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueOrder not implemented")
}
func (UnimplementedAPIServiceServer) SeedOrders(context.Context, *SeedOrdersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedOrders not implemented")
}
func (UnimplementedAPIServiceServer) CreatePackaging(context.Context, *CreatePackagingRequest) (*CreatePackagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackaging not implemented")
}
func (UnimplementedAPIServiceServer) GetPackaging(context.Context, *GetPackagingRequest) (*GetPackagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackaging not implemented")
}
func (UnimplementedAPIServiceServer) GetAllPackaging(context.Context, *emptypb.Empty) (*GetAllPackagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPackaging not implemented")
}
func (UnimplementedAPIServiceServer) UpdatePackaging(context.Context, *UpdatePackagingRequest) (*UpdatePackagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackaging not implemented")
}
func (UnimplementedAPIServiceServer) DeletePackaging(context.Context, *DeletePackagingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackaging not implemented")
}
func (UnimplementedAPIServiceServer) CreateReturn(context.Context, *CreateReturnRequest) (*CreateReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReturn not implemented")
}
func (UnimplementedAPIServiceServer) GetReturns(context.Context, *emptypb.Empty) (*GetReturnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReturns not implemented")
}
func (UnimplementedAPIServiceServer) GetReturnByOrderID(context.Context, *GetReturnByOrderIDRequest) (*GetReturnByOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReturnByOrderID not implemented")
}
func (UnimplementedAPIServiceServer) GetReturnsByUserID(context.Context, *GetReturnsByUserIDRequest) (*GetReturnsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReturnsByUserID not implemented")
}
func (UnimplementedAPIServiceServer) UpdateReturn(context.Context, *UpdateReturnRequest) (*UpdateReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReturn not implemented")
}
func (UnimplementedAPIServiceServer) DeleteReturn(context.Context, *DeleteReturnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReturn not implemented")
}
func (UnimplementedAPIServiceServer) ProcessReturn(context.Context, *ProcessReturnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessReturn not implemented")
}
func (UnimplementedAPIServiceServer) CreateReturnReason(context.Context, *CreateReturnReasonRequest) (*CreateReturnReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReturnReason not implemented")
}
func (UnimplementedAPIServiceServer) GetReturnReason(context.Context, *GetReturnReasonRequest) (*GetReturnReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReturnReason not implemented")
}
func (UnimplementedAPIServiceServer) GetAllReturnReasons(context.Context, *emptypb.Empty) (*GetAllReturnReasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReturnReasons not implemented")
}
func (UnimplementedAPIServiceServer) UpdateReturnReason(context.Context, *UpdateReturnReasonRequest) (*UpdateReturnReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReturnReason not implemented")
}
func (UnimplementedAPIServiceServer) DeleteReturnReason(context.Context, *DeleteReturnReasonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReturnReason not implemented")
}
func (UnimplementedAPIServiceServer) CheckReturnReasonExists(context.Context, *CheckReturnReasonExistsRequest) (*CheckReturnReasonExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckReturnReasonExists not implemented")
}
func (UnimplementedAPIServiceServer) CreateStatus(context.Context, *CreateStatusRequest) (*CreateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatus not implemented")
}
func (UnimplementedAPIServiceServer) GetStatusByID(context.Context, *GetStatusByIDRequest) (*GetStatusByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusByID not implemented")
}
func (UnimplementedAPIServiceServer) GetAllStatuses(context.Context, *emptypb.Empty) (*GetAllStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStatuses not implemented")
}
func (UnimplementedAPIServiceServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedAPIServiceServer) DeleteStatus(context.Context, *DeleteStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatus not implemented")
}
func (UnimplementedAPIServiceServer) GetStatusByName(context.Context, *GetStatusByNameRequest) (*GetStatusByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusByName not implemented")
}
func (UnimplementedAPIServiceServer) CheckStatusExists(context.Context, *CheckStatusExistsRequest) (*CheckStatusExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatusExists not implemented")
}
func (UnimplementedAPIServiceServer) SetWorkerCount(context.Context, *SetWorkerCountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkerCount not implemented")
}
func (UnimplementedAPIServiceServer) mustEmbedUnimplementedAPIServiceServer() {}
func (UnimplementedAPIServiceServer) testEmbeddedByValue()                    {}

// UnsafeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServiceServer will
// result in compilation errors.
type UnsafeAPIServiceServer interface {
	mustEmbedUnimplementedAPIServiceServer()
}

func RegisterAPIServiceServer(s grpc.ServiceRegistrar, srv APIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APIService_ServiceDesc, srv)
}

func _APIService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAllUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetUserName(ctx, req.(*GetUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CheckUserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CheckUserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CheckUserExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CheckUserExists(ctx, req.(*CheckUserExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetAllOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAllOrders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetOrdersByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetOrdersByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetOrdersByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetOrdersByUserID(ctx, req.(*GetOrdersByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_IssueOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).IssueOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_IssueOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).IssueOrder(ctx, req.(*IssueOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SeedOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SeedOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_SeedOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SeedOrders(ctx, req.(*SeedOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreatePackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreatePackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CreatePackaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreatePackaging(ctx, req.(*CreatePackagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetPackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetPackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetPackaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetPackaging(ctx, req.(*GetPackagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAllPackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAllPackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetAllPackaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAllPackaging(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdatePackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdatePackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_UpdatePackaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdatePackaging(ctx, req.(*UpdatePackagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeletePackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeletePackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_DeletePackaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeletePackaging(ctx, req.(*DeletePackagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CreateReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateReturn(ctx, req.(*CreateReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetReturns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetReturns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetReturns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetReturns(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetReturnByOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReturnByOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetReturnByOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetReturnByOrderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetReturnByOrderID(ctx, req.(*GetReturnByOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetReturnsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReturnsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetReturnsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetReturnsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetReturnsByUserID(ctx, req.(*GetReturnsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdateReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdateReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_UpdateReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdateReturn(ctx, req.(*UpdateReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_DeleteReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteReturn(ctx, req.(*DeleteReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ProcessReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ProcessReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_ProcessReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ProcessReturn(ctx, req.(*ProcessReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReturnReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CreateReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateReturnReason(ctx, req.(*CreateReturnReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReturnReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetReturnReason(ctx, req.(*GetReturnReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAllReturnReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAllReturnReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetAllReturnReasons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAllReturnReasons(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdateReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReturnReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdateReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_UpdateReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdateReturnReason(ctx, req.(*UpdateReturnReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteReturnReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReturnReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteReturnReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_DeleteReturnReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteReturnReason(ctx, req.(*DeleteReturnReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CheckReturnReasonExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReturnReasonExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CheckReturnReasonExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CheckReturnReasonExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CheckReturnReasonExists(ctx, req.(*CheckReturnReasonExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CreateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CreateStatus(ctx, req.(*CreateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetStatusByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetStatusByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetStatusByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetStatusByID(ctx, req.(*GetStatusByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetAllStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetAllStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetAllStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetAllStatuses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_DeleteStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteStatus(ctx, req.(*DeleteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetStatusByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetStatusByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_GetStatusByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetStatusByName(ctx, req.(*GetStatusByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_CheckStatusExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStatusExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).CheckStatusExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_CheckStatusExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).CheckStatusExists(ctx, req.(*CheckStatusExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_SetWorkerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWorkerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).SetWorkerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIService_SetWorkerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).SetWorkerCount(ctx, req.(*SetWorkerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIService_ServiceDesc is the grpc.ServiceDesc for APIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _APIService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _APIService_GetUser_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _APIService_GetAllUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _APIService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _APIService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUserName",
			Handler:    _APIService_GetUserName_Handler,
		},
		{
			MethodName: "CheckUserExists",
			Handler:    _APIService_CheckUserExists_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _APIService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _APIService_GetOrder_Handler,
		},
		{
			MethodName: "GetAllOrders",
			Handler:    _APIService_GetAllOrders_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _APIService_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _APIService_DeleteOrder_Handler,
		},
		{
			MethodName: "GetOrdersByUserID",
			Handler:    _APIService_GetOrdersByUserID_Handler,
		},
		{
			MethodName: "IssueOrder",
			Handler:    _APIService_IssueOrder_Handler,
		},
		{
			MethodName: "SeedOrders",
			Handler:    _APIService_SeedOrders_Handler,
		},
		{
			MethodName: "CreatePackaging",
			Handler:    _APIService_CreatePackaging_Handler,
		},
		{
			MethodName: "GetPackaging",
			Handler:    _APIService_GetPackaging_Handler,
		},
		{
			MethodName: "GetAllPackaging",
			Handler:    _APIService_GetAllPackaging_Handler,
		},
		{
			MethodName: "UpdatePackaging",
			Handler:    _APIService_UpdatePackaging_Handler,
		},
		{
			MethodName: "DeletePackaging",
			Handler:    _APIService_DeletePackaging_Handler,
		},
		{
			MethodName: "CreateReturn",
			Handler:    _APIService_CreateReturn_Handler,
		},
		{
			MethodName: "GetReturns",
			Handler:    _APIService_GetReturns_Handler,
		},
		{
			MethodName: "GetReturnByOrderID",
			Handler:    _APIService_GetReturnByOrderID_Handler,
		},
		{
			MethodName: "GetReturnsByUserID",
			Handler:    _APIService_GetReturnsByUserID_Handler,
		},
		{
			MethodName: "UpdateReturn",
			Handler:    _APIService_UpdateReturn_Handler,
		},
		{
			MethodName: "DeleteReturn",
			Handler:    _APIService_DeleteReturn_Handler,
		},
		{
			MethodName: "ProcessReturn",
			Handler:    _APIService_ProcessReturn_Handler,
		},
		{
			MethodName: "CreateReturnReason",
			Handler:    _APIService_CreateReturnReason_Handler,
		},
		{
			MethodName: "GetReturnReason",
			Handler:    _APIService_GetReturnReason_Handler,
		},
		{
			MethodName: "GetAllReturnReasons",
			Handler:    _APIService_GetAllReturnReasons_Handler,
		},
		{
			MethodName: "UpdateReturnReason",
			Handler:    _APIService_UpdateReturnReason_Handler,
		},
		{
			MethodName: "DeleteReturnReason",
			Handler:    _APIService_DeleteReturnReason_Handler,
		},
		{
			MethodName: "CheckReturnReasonExists",
			Handler:    _APIService_CheckReturnReasonExists_Handler,
		},
		{
			MethodName: "CreateStatus",
			Handler:    _APIService_CreateStatus_Handler,
		},
		{
			MethodName: "GetStatusByID",
			Handler:    _APIService_GetStatusByID_Handler,
		},
		{
			MethodName: "GetAllStatuses",
			Handler:    _APIService_GetAllStatuses_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _APIService_UpdateStatus_Handler,
		},
		{
			MethodName: "DeleteStatus",
			Handler:    _APIService_DeleteStatus_Handler,
		},
		{
			MethodName: "GetStatusByName",
			Handler:    _APIService_GetStatusByName_Handler,
		},
		{
			MethodName: "CheckStatusExists",
			Handler:    _APIService_CheckStatusExists_Handler,
		},
		{
			MethodName: "SetWorkerCount",
			Handler:    _APIService_SetWorkerCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_service.proto",
}
