// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := CreateUserRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on GetAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUsersResponseMultiError, or nil if none found.
func (m *GetAllUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllUsersResponseMultiError(errors)
	}

	return nil
}

// GetAllUsersResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUsersResponseMultiError) AllErrors() []error { return m }

// GetAllUsersResponseValidationError is the validation error returned by
// GetAllUsersResponse.Validate if the designated constraints aren't met.
type GetAllUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUsersResponseValidationError) ErrorName() string {
	return "GetAllUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUsersResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := UpdateUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on GetUserNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNameRequestMultiError, or nil if none found.
func (m *GetUserNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserNameRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserNameRequestMultiError(errors)
	}

	return nil
}

// GetUserNameRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserNameRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNameRequestMultiError) AllErrors() []error { return m }

// GetUserNameRequestValidationError is the validation error returned by
// GetUserNameRequest.Validate if the designated constraints aren't met.
type GetUserNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNameRequestValidationError) ErrorName() string {
	return "GetUserNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNameRequestValidationError{}

// Validate checks the field values on GetUserNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserNameResponseMultiError, or nil if none found.
func (m *GetUserNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserNameResponseMultiError(errors)
	}

	return nil
}

// GetUserNameResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserNameResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserNameResponseMultiError) AllErrors() []error { return m }

// GetUserNameResponseValidationError is the validation error returned by
// GetUserNameResponse.Validate if the designated constraints aren't met.
type GetUserNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserNameResponseValidationError) ErrorName() string {
	return "GetUserNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserNameResponseValidationError{}

// Validate checks the field values on CheckUserExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUserExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUserExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUserExistsRequestMultiError, or nil if none found.
func (m *CheckUserExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUserExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CheckUserExistsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckUserExistsRequestMultiError(errors)
	}

	return nil
}

// CheckUserExistsRequestMultiError is an error wrapping multiple validation
// errors returned by CheckUserExistsRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckUserExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUserExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUserExistsRequestMultiError) AllErrors() []error { return m }

// CheckUserExistsRequestValidationError is the validation error returned by
// CheckUserExistsRequest.Validate if the designated constraints aren't met.
type CheckUserExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserExistsRequestValidationError) ErrorName() string {
	return "CheckUserExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserExistsRequestValidationError{}

// Validate checks the field values on CheckUserExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUserExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUserExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUserExistsResponseMultiError, or nil if none found.
func (m *CheckUserExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUserExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckUserExistsResponseMultiError(errors)
	}

	return nil
}

// CheckUserExistsResponseMultiError is an error wrapping multiple validation
// errors returned by CheckUserExistsResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckUserExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUserExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUserExistsResponseMultiError) AllErrors() []error { return m }

// CheckUserExistsResponseValidationError is the validation error returned by
// CheckUserExistsResponse.Validate if the designated constraints aren't met.
type CheckUserExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserExistsResponseValidationError) ErrorName() string {
	return "CheckUserExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserExistsResponseValidationError{}

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPackagingId() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "PackagingId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpirationDate()) < 1 {
		err := CreateOrderRequestValidationError{
			field:  "ExpirationDate",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBaseCost() < 0 {
		err := CreateOrderRequestValidationError{
			field:  "BaseCost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WithFilm

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

// Validate checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseMultiError, or nil if none found.
func (m *CreateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateOrderResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseValidationError is the validation error returned by
// CreateOrderResponse.Validate if the designated constraints aren't met.
type CreateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseValidationError) ErrorName() string {
	return "CreateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseValidationError{}

// Validate checks the field values on GetOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderRequestMultiError, or nil if none found.
func (m *GetOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := GetOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderRequestMultiError(errors)
	}

	return nil
}

// GetOrderRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderRequestMultiError) AllErrors() []error { return m }

// GetOrderRequestValidationError is the validation error returned by
// GetOrderRequest.Validate if the designated constraints aren't met.
type GetOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderRequestValidationError) ErrorName() string { return "GetOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderRequestValidationError{}

// Validate checks the field values on GetOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponseMultiError, or nil if none found.
func (m *GetOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for UserId

	// no validation rules for PackagingId

	// no validation rules for StatusId

	// no validation rules for AcceptanceDate

	// no validation rules for ExpirationDate

	// no validation rules for Weight

	// no validation rules for BaseCost

	// no validation rules for PackagingCost

	// no validation rules for TotalCost

	// no validation rules for WithFilm

	// no validation rules for IssueDate

	if len(errors) > 0 {
		return GetOrderResponseMultiError(errors)
	}

	return nil
}

// GetOrderResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseMultiError) AllErrors() []error { return m }

// GetOrderResponseValidationError is the validation error returned by
// GetOrderResponse.Validate if the designated constraints aren't met.
type GetOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseValidationError) ErrorName() string { return "GetOrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseValidationError{}

// Validate checks the field values on GetAllOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllOrdersResponseMultiError, or nil if none found.
func (m *GetAllOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllOrdersResponseMultiError(errors)
	}

	return nil
}

// GetAllOrdersResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllOrdersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllOrdersResponseMultiError) AllErrors() []error { return m }

// GetAllOrdersResponseValidationError is the validation error returned by
// GetAllOrdersResponse.Validate if the designated constraints aren't met.
type GetAllOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllOrdersResponseValidationError) ErrorName() string {
	return "GetAllOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllOrdersResponseValidationError{}

// Validate checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderRequestMultiError, or nil if none found.
func (m *UpdateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := UpdateOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := UpdateOrderRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPackagingId() <= 0 {
		err := UpdateOrderRequestValidationError{
			field:  "PackagingId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatusId() <= 0 {
		err := UpdateOrderRequestValidationError{
			field:  "StatusId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpirationDate()) < 1 {
		err := UpdateOrderRequestValidationError{
			field:  "ExpirationDate",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := UpdateOrderRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBaseCost() < 0 {
		err := UpdateOrderRequestValidationError{
			field:  "BaseCost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPackagingCost() < 0 {
		err := UpdateOrderRequestValidationError{
			field:  "PackagingCost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalCost() < 0 {
		err := UpdateOrderRequestValidationError{
			field:  "TotalCost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WithFilm

	// no validation rules for IssueDate

	if len(errors) > 0 {
		return UpdateOrderRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderRequestMultiError) AllErrors() []error { return m }

// UpdateOrderRequestValidationError is the validation error returned by
// UpdateOrderRequest.Validate if the designated constraints aren't met.
type UpdateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderRequestValidationError) ErrorName() string {
	return "UpdateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderRequestValidationError{}

// Validate checks the field values on UpdateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderResponseMultiError, or nil if none found.
func (m *UpdateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateOrderResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderResponseMultiError) AllErrors() []error { return m }

// UpdateOrderResponseValidationError is the validation error returned by
// UpdateOrderResponse.Validate if the designated constraints aren't met.
type UpdateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderResponseValidationError) ErrorName() string {
	return "UpdateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderResponseValidationError{}

// Validate checks the field values on DeleteOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderRequestMultiError, or nil if none found.
func (m *DeleteOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := DeleteOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrderRequestMultiError(errors)
	}

	return nil
}

// DeleteOrderRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderRequestMultiError) AllErrors() []error { return m }

// DeleteOrderRequestValidationError is the validation error returned by
// DeleteOrderRequest.Validate if the designated constraints aren't met.
type DeleteOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderRequestValidationError) ErrorName() string {
	return "DeleteOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderRequestValidationError{}

// Validate checks the field values on GetOrdersByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersByUserIDRequestMultiError, or nil if none found.
func (m *GetOrdersByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetOrdersByUserIDRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrdersByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetOrdersByUserIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrdersByUserIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrdersByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersByUserIDRequestMultiError) AllErrors() []error { return m }

// GetOrdersByUserIDRequestValidationError is the validation error returned by
// GetOrdersByUserIDRequest.Validate if the designated constraints aren't met.
type GetOrdersByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersByUserIDRequestValidationError) ErrorName() string {
	return "GetOrdersByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrdersByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersByUserIDRequestValidationError{}

// Validate checks the field values on GetOrdersByUserIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrdersByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrdersByUserIDResponseMultiError, or nil if none found.
func (m *GetOrdersByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrdersByUserIDResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrdersByUserIDResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrdersByUserIDResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrdersByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetOrdersByUserIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrdersByUserIDResponse.ValidateAll() if the
// designated constraints aren't met.
type GetOrdersByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersByUserIDResponseMultiError) AllErrors() []error { return m }

// GetOrdersByUserIDResponseValidationError is the validation error returned by
// GetOrdersByUserIDResponse.Validate if the designated constraints aren't met.
type GetOrdersByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersByUserIDResponseValidationError) ErrorName() string {
	return "GetOrdersByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrdersByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersByUserIDResponseValidationError{}

// Validate checks the field values on SeedOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SeedOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SeedOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SeedOrdersRequestMultiError, or nil if none found.
func (m *SeedOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SeedOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCount() <= 0 {
		err := SeedOrdersRequestValidationError{
			field:  "Count",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SeedOrdersRequestMultiError(errors)
	}

	return nil
}

// SeedOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by SeedOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type SeedOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeedOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeedOrdersRequestMultiError) AllErrors() []error { return m }

// SeedOrdersRequestValidationError is the validation error returned by
// SeedOrdersRequest.Validate if the designated constraints aren't met.
type SeedOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeedOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeedOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeedOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeedOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeedOrdersRequestValidationError) ErrorName() string {
	return "SeedOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SeedOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeedOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeedOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeedOrdersRequestValidationError{}

// Validate checks the field values on SeedOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SeedOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SeedOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SeedOrdersResponseMultiError, or nil if none found.
func (m *SeedOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SeedOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return SeedOrdersResponseMultiError(errors)
	}

	return nil
}

// SeedOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by SeedOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type SeedOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeedOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeedOrdersResponseMultiError) AllErrors() []error { return m }

// SeedOrdersResponseValidationError is the validation error returned by
// SeedOrdersResponse.Validate if the designated constraints aren't met.
type SeedOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeedOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeedOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeedOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeedOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeedOrdersResponseValidationError) ErrorName() string {
	return "SeedOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SeedOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeedOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeedOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeedOrdersResponseValidationError{}

// Validate checks the field values on IssueOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IssueOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueOrderRequestMultiError, or nil if none found.
func (m *IssueOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := IssueOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IssueOrderRequestMultiError(errors)
	}

	return nil
}

// IssueOrderRequestMultiError is an error wrapping multiple validation errors
// returned by IssueOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type IssueOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueOrderRequestMultiError) AllErrors() []error { return m }

// IssueOrderRequestValidationError is the validation error returned by
// IssueOrderRequest.Validate if the designated constraints aren't met.
type IssueOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueOrderRequestValidationError) ErrorName() string {
	return "IssueOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueOrderRequestValidationError{}

// Validate checks the field values on IssueOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueOrderResponseMultiError, or nil if none found.
func (m *IssueOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return IssueOrderResponseMultiError(errors)
	}

	return nil
}

// IssueOrderResponseMultiError is an error wrapping multiple validation errors
// returned by IssueOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type IssueOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueOrderResponseMultiError) AllErrors() []error { return m }

// IssueOrderResponseValidationError is the validation error returned by
// IssueOrderResponse.Validate if the designated constraints aren't met.
type IssueOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueOrderResponseValidationError) ErrorName() string {
	return "IssueOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueOrderResponseValidationError{}

// Validate checks the field values on CreatePackagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePackagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePackagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePackagingRequestMultiError, or nil if none found.
func (m *CreatePackagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePackagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPackagingType()) < 1 {
		err := CreatePackagingRequestValidationError{
			field:  "PackagingType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCost() < 0 {
		err := CreatePackagingRequestValidationError{
			field:  "Cost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxWeight() <= 0 {
		err := CreatePackagingRequestValidationError{
			field:  "MaxWeight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePackagingRequestMultiError(errors)
	}

	return nil
}

// CreatePackagingRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePackagingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePackagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePackagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePackagingRequestMultiError) AllErrors() []error { return m }

// CreatePackagingRequestValidationError is the validation error returned by
// CreatePackagingRequest.Validate if the designated constraints aren't met.
type CreatePackagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackagingRequestValidationError) ErrorName() string {
	return "CreatePackagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackagingRequestValidationError{}

// Validate checks the field values on CreatePackagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePackagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePackagingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePackagingResponseMultiError, or nil if none found.
func (m *CreatePackagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePackagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackagingId

	if len(errors) > 0 {
		return CreatePackagingResponseMultiError(errors)
	}

	return nil
}

// CreatePackagingResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePackagingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePackagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePackagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePackagingResponseMultiError) AllErrors() []error { return m }

// CreatePackagingResponseValidationError is the validation error returned by
// CreatePackagingResponse.Validate if the designated constraints aren't met.
type CreatePackagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePackagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePackagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePackagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePackagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePackagingResponseValidationError) ErrorName() string {
	return "CreatePackagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePackagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePackagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePackagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePackagingResponseValidationError{}

// Validate checks the field values on GetPackagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPackagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPackagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPackagingRequestMultiError, or nil if none found.
func (m *GetPackagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPackagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPackagingId() <= 0 {
		err := GetPackagingRequestValidationError{
			field:  "PackagingId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPackagingRequestMultiError(errors)
	}

	return nil
}

// GetPackagingRequestMultiError is an error wrapping multiple validation
// errors returned by GetPackagingRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPackagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPackagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPackagingRequestMultiError) AllErrors() []error { return m }

// GetPackagingRequestValidationError is the validation error returned by
// GetPackagingRequest.Validate if the designated constraints aren't met.
type GetPackagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackagingRequestValidationError) ErrorName() string {
	return "GetPackagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackagingRequestValidationError{}

// Validate checks the field values on GetPackagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPackagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPackagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPackagingResponseMultiError, or nil if none found.
func (m *GetPackagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPackagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackagingId

	// no validation rules for PackagingType

	// no validation rules for Cost

	// no validation rules for MaxWeight

	if len(errors) > 0 {
		return GetPackagingResponseMultiError(errors)
	}

	return nil
}

// GetPackagingResponseMultiError is an error wrapping multiple validation
// errors returned by GetPackagingResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPackagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPackagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPackagingResponseMultiError) AllErrors() []error { return m }

// GetPackagingResponseValidationError is the validation error returned by
// GetPackagingResponse.Validate if the designated constraints aren't met.
type GetPackagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPackagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPackagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPackagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPackagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPackagingResponseValidationError) ErrorName() string {
	return "GetPackagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPackagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPackagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPackagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPackagingResponseValidationError{}

// Validate checks the field values on GetAllPackagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllPackagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPackagingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPackagingResponseMultiError, or nil if none found.
func (m *GetAllPackagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPackagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPackagingOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllPackagingResponseValidationError{
						field:  fmt.Sprintf("PackagingOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllPackagingResponseValidationError{
						field:  fmt.Sprintf("PackagingOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllPackagingResponseValidationError{
					field:  fmt.Sprintf("PackagingOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllPackagingResponseMultiError(errors)
	}

	return nil
}

// GetAllPackagingResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllPackagingResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllPackagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPackagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPackagingResponseMultiError) AllErrors() []error { return m }

// GetAllPackagingResponseValidationError is the validation error returned by
// GetAllPackagingResponse.Validate if the designated constraints aren't met.
type GetAllPackagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPackagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPackagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPackagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPackagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPackagingResponseValidationError) ErrorName() string {
	return "GetAllPackagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPackagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPackagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPackagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPackagingResponseValidationError{}

// Validate checks the field values on Packaging with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Packaging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Packaging with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PackagingMultiError, or nil
// if none found.
func (m *Packaging) ValidateAll() error {
	return m.validate(true)
}

func (m *Packaging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackagingId

	// no validation rules for PackagingType

	// no validation rules for Cost

	// no validation rules for MaxWeight

	if len(errors) > 0 {
		return PackagingMultiError(errors)
	}

	return nil
}

// PackagingMultiError is an error wrapping multiple validation errors returned
// by Packaging.ValidateAll() if the designated constraints aren't met.
type PackagingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackagingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackagingMultiError) AllErrors() []error { return m }

// PackagingValidationError is the validation error returned by
// Packaging.Validate if the designated constraints aren't met.
type PackagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackagingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackagingValidationError) ErrorName() string { return "PackagingValidationError" }

// Error satisfies the builtin error interface
func (e PackagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackagingValidationError{}

// Validate checks the field values on UpdatePackagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePackagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePackagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePackagingRequestMultiError, or nil if none found.
func (m *UpdatePackagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePackagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPackagingId() <= 0 {
		err := UpdatePackagingRequestValidationError{
			field:  "PackagingId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPackagingType()) < 1 {
		err := UpdatePackagingRequestValidationError{
			field:  "PackagingType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCost() < 0 {
		err := UpdatePackagingRequestValidationError{
			field:  "Cost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxWeight() <= 0 {
		err := UpdatePackagingRequestValidationError{
			field:  "MaxWeight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdatePackagingRequestMultiError(errors)
	}

	return nil
}

// UpdatePackagingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePackagingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePackagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePackagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePackagingRequestMultiError) AllErrors() []error { return m }

// UpdatePackagingRequestValidationError is the validation error returned by
// UpdatePackagingRequest.Validate if the designated constraints aren't met.
type UpdatePackagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackagingRequestValidationError) ErrorName() string {
	return "UpdatePackagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePackagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackagingRequestValidationError{}

// Validate checks the field values on UpdatePackagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePackagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePackagingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePackagingResponseMultiError, or nil if none found.
func (m *UpdatePackagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePackagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdatePackagingResponseMultiError(errors)
	}

	return nil
}

// UpdatePackagingResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePackagingResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePackagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePackagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePackagingResponseMultiError) AllErrors() []error { return m }

// UpdatePackagingResponseValidationError is the validation error returned by
// UpdatePackagingResponse.Validate if the designated constraints aren't met.
type UpdatePackagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePackagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePackagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePackagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePackagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePackagingResponseValidationError) ErrorName() string {
	return "UpdatePackagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePackagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePackagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePackagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePackagingResponseValidationError{}

// Validate checks the field values on DeletePackagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePackagingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePackagingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePackagingRequestMultiError, or nil if none found.
func (m *DeletePackagingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePackagingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPackagingId() <= 0 {
		err := DeletePackagingRequestValidationError{
			field:  "PackagingId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePackagingRequestMultiError(errors)
	}

	return nil
}

// DeletePackagingRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePackagingRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePackagingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePackagingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePackagingRequestMultiError) AllErrors() []error { return m }

// DeletePackagingRequestValidationError is the validation error returned by
// DeletePackagingRequest.Validate if the designated constraints aren't met.
type DeletePackagingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackagingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackagingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackagingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackagingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackagingRequestValidationError) ErrorName() string {
	return "DeletePackagingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackagingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackagingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackagingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackagingRequestValidationError{}

// Validate checks the field values on DeletePackagingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePackagingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePackagingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePackagingResponseMultiError, or nil if none found.
func (m *DeletePackagingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePackagingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeletePackagingResponseMultiError(errors)
	}

	return nil
}

// DeletePackagingResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePackagingResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePackagingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePackagingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePackagingResponseMultiError) AllErrors() []error { return m }

// DeletePackagingResponseValidationError is the validation error returned by
// DeletePackagingResponse.Validate if the designated constraints aren't met.
type DeletePackagingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePackagingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePackagingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePackagingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePackagingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePackagingResponseValidationError) ErrorName() string {
	return "DeletePackagingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePackagingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePackagingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePackagingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePackagingResponseValidationError{}

// Validate checks the field values on CreateReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReturnRequestMultiError, or nil if none found.
func (m *CreateReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := CreateReturnRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateReturnRequestMultiError(errors)
	}

	return nil
}

// CreateReturnRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReturnRequestMultiError) AllErrors() []error { return m }

// CreateReturnRequestValidationError is the validation error returned by
// CreateReturnRequest.Validate if the designated constraints aren't met.
type CreateReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReturnRequestValidationError) ErrorName() string {
	return "CreateReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReturnRequestValidationError{}

// Validate checks the field values on CreateReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReturnResponseMultiError, or nil if none found.
func (m *CreateReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateReturnResponseMultiError(errors)
	}

	return nil
}

// CreateReturnResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReturnResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReturnResponseMultiError) AllErrors() []error { return m }

// CreateReturnResponseValidationError is the validation error returned by
// CreateReturnResponse.Validate if the designated constraints aren't met.
type CreateReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReturnResponseValidationError) ErrorName() string {
	return "CreateReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReturnResponseValidationError{}

// Validate checks the field values on GetReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsResponseMultiError, or nil if none found.
func (m *GetReturnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReturns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReturnsResponseValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReturnsResponseValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReturnsResponseValidationError{
					field:  fmt.Sprintf("Returns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReturnsResponseMultiError(errors)
	}

	return nil
}

// GetReturnsResponseMultiError is an error wrapping multiple validation errors
// returned by GetReturnsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReturnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsResponseMultiError) AllErrors() []error { return m }

// GetReturnsResponseValidationError is the validation error returned by
// GetReturnsResponse.Validate if the designated constraints aren't met.
type GetReturnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsResponseValidationError) ErrorName() string {
	return "GetReturnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsResponseValidationError{}

// Validate checks the field values on GetReturnByOrderIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnByOrderIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnByOrderIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnByOrderIDRequestMultiError, or nil if none found.
func (m *GetReturnByOrderIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnByOrderIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := GetReturnByOrderIDRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReturnByOrderIDRequestMultiError(errors)
	}

	return nil
}

// GetReturnByOrderIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetReturnByOrderIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetReturnByOrderIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnByOrderIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnByOrderIDRequestMultiError) AllErrors() []error { return m }

// GetReturnByOrderIDRequestValidationError is the validation error returned by
// GetReturnByOrderIDRequest.Validate if the designated constraints aren't met.
type GetReturnByOrderIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnByOrderIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnByOrderIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnByOrderIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnByOrderIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnByOrderIDRequestValidationError) ErrorName() string {
	return "GetReturnByOrderIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnByOrderIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnByOrderIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnByOrderIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnByOrderIDRequestValidationError{}

// Validate checks the field values on GetReturnByOrderIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnByOrderIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnByOrderIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnByOrderIDResponseMultiError, or nil if none found.
func (m *GetReturnByOrderIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnByOrderIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReturnInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReturnByOrderIDResponseValidationError{
					field:  "ReturnInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReturnByOrderIDResponseValidationError{
					field:  "ReturnInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReturnByOrderIDResponseValidationError{
				field:  "ReturnInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReturnByOrderIDResponseMultiError(errors)
	}

	return nil
}

// GetReturnByOrderIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetReturnByOrderIDResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReturnByOrderIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnByOrderIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnByOrderIDResponseMultiError) AllErrors() []error { return m }

// GetReturnByOrderIDResponseValidationError is the validation error returned
// by GetReturnByOrderIDResponse.Validate if the designated constraints aren't met.
type GetReturnByOrderIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnByOrderIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnByOrderIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnByOrderIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnByOrderIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnByOrderIDResponseValidationError) ErrorName() string {
	return "GetReturnByOrderIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnByOrderIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnByOrderIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnByOrderIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnByOrderIDResponseValidationError{}

// Validate checks the field values on GetReturnsByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsByUserIDRequestMultiError, or nil if none found.
func (m *GetReturnsByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetReturnsByUserIDRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReturnsByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetReturnsByUserIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetReturnsByUserIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetReturnsByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsByUserIDRequestMultiError) AllErrors() []error { return m }

// GetReturnsByUserIDRequestValidationError is the validation error returned by
// GetReturnsByUserIDRequest.Validate if the designated constraints aren't met.
type GetReturnsByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsByUserIDRequestValidationError) ErrorName() string {
	return "GetReturnsByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsByUserIDRequestValidationError{}

// Validate checks the field values on GetReturnsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnsByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnsByUserIDResponseMultiError, or nil if none found.
func (m *GetReturnsByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnsByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReturns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReturnsByUserIDResponseValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReturnsByUserIDResponseValidationError{
						field:  fmt.Sprintf("Returns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReturnsByUserIDResponseValidationError{
					field:  fmt.Sprintf("Returns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReturnsByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetReturnsByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetReturnsByUserIDResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReturnsByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnsByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnsByUserIDResponseMultiError) AllErrors() []error { return m }

// GetReturnsByUserIDResponseValidationError is the validation error returned
// by GetReturnsByUserIDResponse.Validate if the designated constraints aren't met.
type GetReturnsByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnsByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnsByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnsByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnsByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnsByUserIDResponseValidationError) ErrorName() string {
	return "GetReturnsByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnsByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnsByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnsByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnsByUserIDResponseValidationError{}

// Validate checks the field values on UpdateReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReturnRequestMultiError, or nil if none found.
func (m *UpdateReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReturnId() <= 0 {
		err := UpdateReturnRequestValidationError{
			field:  "ReturnId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := UpdateReturnRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := UpdateReturnRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReasonId() <= 0 {
		err := UpdateReturnRequestValidationError{
			field:  "ReasonId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBaseCost() < 0 {
		err := UpdateReturnRequestValidationError{
			field:  "BaseCost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPackagingCost() < 0 {
		err := UpdateReturnRequestValidationError{
			field:  "PackagingCost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalCost() < 0 {
		err := UpdateReturnRequestValidationError{
			field:  "TotalCost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPackagingId() <= 0 {
		err := UpdateReturnRequestValidationError{
			field:  "PackagingId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatusId() <= 0 {
		err := UpdateReturnRequestValidationError{
			field:  "StatusId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateReturnRequestMultiError(errors)
	}

	return nil
}

// UpdateReturnRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReturnRequestMultiError) AllErrors() []error { return m }

// UpdateReturnRequestValidationError is the validation error returned by
// UpdateReturnRequest.Validate if the designated constraints aren't met.
type UpdateReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReturnRequestValidationError) ErrorName() string {
	return "UpdateReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReturnRequestValidationError{}

// Validate checks the field values on UpdateReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReturnResponseMultiError, or nil if none found.
func (m *UpdateReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateReturnResponseMultiError(errors)
	}

	return nil
}

// UpdateReturnResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateReturnResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReturnResponseMultiError) AllErrors() []error { return m }

// UpdateReturnResponseValidationError is the validation error returned by
// UpdateReturnResponse.Validate if the designated constraints aren't met.
type UpdateReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReturnResponseValidationError) ErrorName() string {
	return "UpdateReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReturnResponseValidationError{}

// Validate checks the field values on DeleteReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReturnRequestMultiError, or nil if none found.
func (m *DeleteReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReturnId() <= 0 {
		err := DeleteReturnRequestValidationError{
			field:  "ReturnId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteReturnRequestMultiError(errors)
	}

	return nil
}

// DeleteReturnRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReturnRequestMultiError) AllErrors() []error { return m }

// DeleteReturnRequestValidationError is the validation error returned by
// DeleteReturnRequest.Validate if the designated constraints aren't met.
type DeleteReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReturnRequestValidationError) ErrorName() string {
	return "DeleteReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReturnRequestValidationError{}

// Validate checks the field values on DeleteReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReturnResponseMultiError, or nil if none found.
func (m *DeleteReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteReturnResponseMultiError(errors)
	}

	return nil
}

// DeleteReturnResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteReturnResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReturnResponseMultiError) AllErrors() []error { return m }

// DeleteReturnResponseValidationError is the validation error returned by
// DeleteReturnResponse.Validate if the designated constraints aren't met.
type DeleteReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReturnResponseValidationError) ErrorName() string {
	return "DeleteReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReturnResponseValidationError{}

// Validate checks the field values on ReturnResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReturnResponseMultiError,
// or nil if none found.
func (m *ReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReturnId

	// no validation rules for OrderId

	// no validation rules for UserId

	// no validation rules for ReasonId

	// no validation rules for BaseCost

	// no validation rules for PackagingCost

	// no validation rules for TotalCost

	// no validation rules for PackagingId

	// no validation rules for StatusId

	// no validation rules for ReturnDate

	if len(errors) > 0 {
		return ReturnResponseMultiError(errors)
	}

	return nil
}

// ReturnResponseMultiError is an error wrapping multiple validation errors
// returned by ReturnResponse.ValidateAll() if the designated constraints
// aren't met.
type ReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnResponseMultiError) AllErrors() []error { return m }

// ReturnResponseValidationError is the validation error returned by
// ReturnResponse.Validate if the designated constraints aren't met.
type ReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnResponseValidationError) ErrorName() string { return "ReturnResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnResponseValidationError{}

// Validate checks the field values on ProcessReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessReturnRequestMultiError, or nil if none found.
func (m *ProcessReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ProcessReturnRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProcessReturnRequestMultiError(errors)
	}

	return nil
}

// ProcessReturnRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessReturnRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessReturnRequestMultiError) AllErrors() []error { return m }

// ProcessReturnRequestValidationError is the validation error returned by
// ProcessReturnRequest.Validate if the designated constraints aren't met.
type ProcessReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessReturnRequestValidationError) ErrorName() string {
	return "ProcessReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessReturnRequestValidationError{}

// Validate checks the field values on ProcessReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessReturnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessReturnResponseMultiError, or nil if none found.
func (m *ProcessReturnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessReturnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ProcessReturnResponseMultiError(errors)
	}

	return nil
}

// ProcessReturnResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessReturnResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessReturnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessReturnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessReturnResponseMultiError) AllErrors() []error { return m }

// ProcessReturnResponseValidationError is the validation error returned by
// ProcessReturnResponse.Validate if the designated constraints aren't met.
type ProcessReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessReturnResponseValidationError) ErrorName() string {
	return "ProcessReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessReturnResponseValidationError{}

// Validate checks the field values on CreateReturnReasonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReturnReasonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReturnReasonRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReturnReasonRequestMultiError, or nil if none found.
func (m *CreateReturnReasonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReturnReasonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetReason()) < 1 {
		err := CreateReturnReasonRequestValidationError{
			field:  "Reason",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateReturnReasonRequestMultiError(errors)
	}

	return nil
}

// CreateReturnReasonRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReturnReasonRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateReturnReasonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReturnReasonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReturnReasonRequestMultiError) AllErrors() []error { return m }

// CreateReturnReasonRequestValidationError is the validation error returned by
// CreateReturnReasonRequest.Validate if the designated constraints aren't met.
type CreateReturnReasonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReturnReasonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReturnReasonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReturnReasonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReturnReasonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReturnReasonRequestValidationError) ErrorName() string {
	return "CreateReturnReasonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReturnReasonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReturnReasonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReturnReasonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReturnReasonRequestValidationError{}

// Validate checks the field values on CreateReturnReasonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReturnReasonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReturnReasonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReturnReasonResponseMultiError, or nil if none found.
func (m *CreateReturnReasonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReturnReasonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReasonId

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateReturnReasonResponseMultiError(errors)
	}

	return nil
}

// CreateReturnReasonResponseMultiError is an error wrapping multiple
// validation errors returned by CreateReturnReasonResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateReturnReasonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReturnReasonResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReturnReasonResponseMultiError) AllErrors() []error { return m }

// CreateReturnReasonResponseValidationError is the validation error returned
// by CreateReturnReasonResponse.Validate if the designated constraints aren't met.
type CreateReturnReasonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReturnReasonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReturnReasonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReturnReasonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReturnReasonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReturnReasonResponseValidationError) ErrorName() string {
	return "CreateReturnReasonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReturnReasonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReturnReasonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReturnReasonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReturnReasonResponseValidationError{}

// Validate checks the field values on GetReturnReasonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnReasonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnReasonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnReasonRequestMultiError, or nil if none found.
func (m *GetReturnReasonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnReasonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReasonId() <= 0 {
		err := GetReturnReasonRequestValidationError{
			field:  "ReasonId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReturnReasonRequestMultiError(errors)
	}

	return nil
}

// GetReturnReasonRequestMultiError is an error wrapping multiple validation
// errors returned by GetReturnReasonRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReturnReasonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnReasonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnReasonRequestMultiError) AllErrors() []error { return m }

// GetReturnReasonRequestValidationError is the validation error returned by
// GetReturnReasonRequest.Validate if the designated constraints aren't met.
type GetReturnReasonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnReasonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnReasonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnReasonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnReasonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnReasonRequestValidationError) ErrorName() string {
	return "GetReturnReasonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnReasonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnReasonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnReasonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnReasonRequestValidationError{}

// Validate checks the field values on GetReturnReasonResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnReasonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnReasonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnReasonResponseMultiError, or nil if none found.
func (m *GetReturnReasonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnReasonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReasonId

	// no validation rules for Reason

	if len(errors) > 0 {
		return GetReturnReasonResponseMultiError(errors)
	}

	return nil
}

// GetReturnReasonResponseMultiError is an error wrapping multiple validation
// errors returned by GetReturnReasonResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReturnReasonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnReasonResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnReasonResponseMultiError) AllErrors() []error { return m }

// GetReturnReasonResponseValidationError is the validation error returned by
// GetReturnReasonResponse.Validate if the designated constraints aren't met.
type GetReturnReasonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnReasonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnReasonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnReasonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnReasonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnReasonResponseValidationError) ErrorName() string {
	return "GetReturnReasonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnReasonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnReasonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnReasonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnReasonResponseValidationError{}

// Validate checks the field values on GetAllReturnReasonsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllReturnReasonsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllReturnReasonsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllReturnReasonsResponseMultiError, or nil if none found.
func (m *GetAllReturnReasonsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllReturnReasonsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReasons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllReturnReasonsResponseValidationError{
						field:  fmt.Sprintf("Reasons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllReturnReasonsResponseValidationError{
						field:  fmt.Sprintf("Reasons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllReturnReasonsResponseValidationError{
					field:  fmt.Sprintf("Reasons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllReturnReasonsResponseMultiError(errors)
	}

	return nil
}

// GetAllReturnReasonsResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllReturnReasonsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAllReturnReasonsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllReturnReasonsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllReturnReasonsResponseMultiError) AllErrors() []error { return m }

// GetAllReturnReasonsResponseValidationError is the validation error returned
// by GetAllReturnReasonsResponse.Validate if the designated constraints
// aren't met.
type GetAllReturnReasonsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllReturnReasonsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllReturnReasonsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllReturnReasonsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllReturnReasonsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllReturnReasonsResponseValidationError) ErrorName() string {
	return "GetAllReturnReasonsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllReturnReasonsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllReturnReasonsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllReturnReasonsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllReturnReasonsResponseValidationError{}

// Validate checks the field values on UpdateReturnReasonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReturnReasonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReturnReasonRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReturnReasonRequestMultiError, or nil if none found.
func (m *UpdateReturnReasonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReturnReasonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReasonId() <= 0 {
		err := UpdateReturnReasonRequestValidationError{
			field:  "ReasonId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReason()) < 1 {
		err := UpdateReturnReasonRequestValidationError{
			field:  "Reason",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateReturnReasonRequestMultiError(errors)
	}

	return nil
}

// UpdateReturnReasonRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateReturnReasonRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateReturnReasonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReturnReasonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReturnReasonRequestMultiError) AllErrors() []error { return m }

// UpdateReturnReasonRequestValidationError is the validation error returned by
// UpdateReturnReasonRequest.Validate if the designated constraints aren't met.
type UpdateReturnReasonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReturnReasonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReturnReasonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReturnReasonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReturnReasonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReturnReasonRequestValidationError) ErrorName() string {
	return "UpdateReturnReasonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReturnReasonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReturnReasonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReturnReasonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReturnReasonRequestValidationError{}

// Validate checks the field values on UpdateReturnReasonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReturnReasonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReturnReasonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReturnReasonResponseMultiError, or nil if none found.
func (m *UpdateReturnReasonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReturnReasonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateReturnReasonResponseMultiError(errors)
	}

	return nil
}

// UpdateReturnReasonResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateReturnReasonResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateReturnReasonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReturnReasonResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReturnReasonResponseMultiError) AllErrors() []error { return m }

// UpdateReturnReasonResponseValidationError is the validation error returned
// by UpdateReturnReasonResponse.Validate if the designated constraints aren't met.
type UpdateReturnReasonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReturnReasonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReturnReasonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReturnReasonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReturnReasonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReturnReasonResponseValidationError) ErrorName() string {
	return "UpdateReturnReasonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReturnReasonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReturnReasonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReturnReasonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReturnReasonResponseValidationError{}

// Validate checks the field values on DeleteReturnReasonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReturnReasonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReturnReasonRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReturnReasonRequestMultiError, or nil if none found.
func (m *DeleteReturnReasonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReturnReasonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReasonId() <= 0 {
		err := DeleteReturnReasonRequestValidationError{
			field:  "ReasonId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteReturnReasonRequestMultiError(errors)
	}

	return nil
}

// DeleteReturnReasonRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteReturnReasonRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteReturnReasonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReturnReasonRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReturnReasonRequestMultiError) AllErrors() []error { return m }

// DeleteReturnReasonRequestValidationError is the validation error returned by
// DeleteReturnReasonRequest.Validate if the designated constraints aren't met.
type DeleteReturnReasonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReturnReasonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReturnReasonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReturnReasonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReturnReasonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReturnReasonRequestValidationError) ErrorName() string {
	return "DeleteReturnReasonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReturnReasonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReturnReasonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReturnReasonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReturnReasonRequestValidationError{}

// Validate checks the field values on DeleteReturnReasonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReturnReasonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReturnReasonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReturnReasonResponseMultiError, or nil if none found.
func (m *DeleteReturnReasonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReturnReasonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteReturnReasonResponseMultiError(errors)
	}

	return nil
}

// DeleteReturnReasonResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteReturnReasonResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteReturnReasonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReturnReasonResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReturnReasonResponseMultiError) AllErrors() []error { return m }

// DeleteReturnReasonResponseValidationError is the validation error returned
// by DeleteReturnReasonResponse.Validate if the designated constraints aren't met.
type DeleteReturnReasonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReturnReasonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReturnReasonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReturnReasonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReturnReasonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReturnReasonResponseValidationError) ErrorName() string {
	return "DeleteReturnReasonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReturnReasonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReturnReasonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReturnReasonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReturnReasonResponseValidationError{}

// Validate checks the field values on CheckReturnReasonExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckReturnReasonExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckReturnReasonExistsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckReturnReasonExistsRequestMultiError, or nil if none found.
func (m *CheckReturnReasonExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckReturnReasonExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReasonId() <= 0 {
		err := CheckReturnReasonExistsRequestValidationError{
			field:  "ReasonId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckReturnReasonExistsRequestMultiError(errors)
	}

	return nil
}

// CheckReturnReasonExistsRequestMultiError is an error wrapping multiple
// validation errors returned by CheckReturnReasonExistsRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckReturnReasonExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckReturnReasonExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckReturnReasonExistsRequestMultiError) AllErrors() []error { return m }

// CheckReturnReasonExistsRequestValidationError is the validation error
// returned by CheckReturnReasonExistsRequest.Validate if the designated
// constraints aren't met.
type CheckReturnReasonExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckReturnReasonExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckReturnReasonExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckReturnReasonExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckReturnReasonExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckReturnReasonExistsRequestValidationError) ErrorName() string {
	return "CheckReturnReasonExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckReturnReasonExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckReturnReasonExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckReturnReasonExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckReturnReasonExistsRequestValidationError{}

// Validate checks the field values on CheckReturnReasonExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckReturnReasonExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckReturnReasonExistsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckReturnReasonExistsResponseMultiError, or nil if none found.
func (m *CheckReturnReasonExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckReturnReasonExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckReturnReasonExistsResponseMultiError(errors)
	}

	return nil
}

// CheckReturnReasonExistsResponseMultiError is an error wrapping multiple
// validation errors returned by CheckReturnReasonExistsResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckReturnReasonExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckReturnReasonExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckReturnReasonExistsResponseMultiError) AllErrors() []error { return m }

// CheckReturnReasonExistsResponseValidationError is the validation error
// returned by CheckReturnReasonExistsResponse.Validate if the designated
// constraints aren't met.
type CheckReturnReasonExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckReturnReasonExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckReturnReasonExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckReturnReasonExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckReturnReasonExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckReturnReasonExistsResponseValidationError) ErrorName() string {
	return "CheckReturnReasonExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckReturnReasonExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckReturnReasonExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckReturnReasonExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckReturnReasonExistsResponseValidationError{}

// Validate checks the field values on CreateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStatusRequestMultiError, or nil if none found.
func (m *CreateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetStatusName()) < 1 {
		err := CreateStatusRequestValidationError{
			field:  "StatusName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateStatusRequestMultiError(errors)
	}

	return nil
}

// CreateStatusRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStatusRequestMultiError) AllErrors() []error { return m }

// CreateStatusRequestValidationError is the validation error returned by
// CreateStatusRequest.Validate if the designated constraints aren't met.
type CreateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStatusRequestValidationError) ErrorName() string {
	return "CreateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStatusRequestValidationError{}

// Validate checks the field values on CreateStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStatusResponseMultiError, or nil if none found.
func (m *CreateStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusId

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateStatusResponseMultiError(errors)
	}

	return nil
}

// CreateStatusResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStatusResponseMultiError) AllErrors() []error { return m }

// CreateStatusResponseValidationError is the validation error returned by
// CreateStatusResponse.Validate if the designated constraints aren't met.
type CreateStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStatusResponseValidationError) ErrorName() string {
	return "CreateStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStatusResponseValidationError{}

// Validate checks the field values on GetStatusByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatusByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusByIDRequestMultiError, or nil if none found.
func (m *GetStatusByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusId() <= 0 {
		err := GetStatusByIDRequestValidationError{
			field:  "StatusId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStatusByIDRequestMultiError(errors)
	}

	return nil
}

// GetStatusByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetStatusByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStatusByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusByIDRequestMultiError) AllErrors() []error { return m }

// GetStatusByIDRequestValidationError is the validation error returned by
// GetStatusByIDRequest.Validate if the designated constraints aren't met.
type GetStatusByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusByIDRequestValidationError) ErrorName() string {
	return "GetStatusByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusByIDRequestValidationError{}

// Validate checks the field values on GetStatusByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatusByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusByIDResponseMultiError, or nil if none found.
func (m *GetStatusByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusId

	// no validation rules for StatusName

	if len(errors) > 0 {
		return GetStatusByIDResponseMultiError(errors)
	}

	return nil
}

// GetStatusByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetStatusByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStatusByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusByIDResponseMultiError) AllErrors() []error { return m }

// GetStatusByIDResponseValidationError is the validation error returned by
// GetStatusByIDResponse.Validate if the designated constraints aren't met.
type GetStatusByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusByIDResponseValidationError) ErrorName() string {
	return "GetStatusByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusByIDResponseValidationError{}

// Validate checks the field values on GetAllStatusesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllStatusesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllStatusesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllStatusesRequestMultiError, or nil if none found.
func (m *GetAllStatusesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllStatusesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllStatusesRequestMultiError(errors)
	}

	return nil
}

// GetAllStatusesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllStatusesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllStatusesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllStatusesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllStatusesRequestMultiError) AllErrors() []error { return m }

// GetAllStatusesRequestValidationError is the validation error returned by
// GetAllStatusesRequest.Validate if the designated constraints aren't met.
type GetAllStatusesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllStatusesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllStatusesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllStatusesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllStatusesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllStatusesRequestValidationError) ErrorName() string {
	return "GetAllStatusesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllStatusesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllStatusesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllStatusesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllStatusesRequestValidationError{}

// Validate checks the field values on GetAllStatusesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllStatusesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllStatusesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllStatusesResponseMultiError, or nil if none found.
func (m *GetAllStatusesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllStatusesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllStatusesResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllStatusesResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllStatusesResponseValidationError{
					field:  fmt.Sprintf("Statuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllStatusesResponseMultiError(errors)
	}

	return nil
}

// GetAllStatusesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllStatusesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllStatusesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllStatusesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllStatusesResponseMultiError) AllErrors() []error { return m }

// GetAllStatusesResponseValidationError is the validation error returned by
// GetAllStatusesResponse.Validate if the designated constraints aren't met.
type GetAllStatusesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllStatusesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllStatusesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllStatusesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllStatusesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllStatusesResponseValidationError) ErrorName() string {
	return "GetAllStatusesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllStatusesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllStatusesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllStatusesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllStatusesResponseValidationError{}

// Validate checks the field values on UpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusRequestMultiError, or nil if none found.
func (m *UpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusId() <= 0 {
		err := UpdateStatusRequestValidationError{
			field:  "StatusId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatusName()) < 1 {
		err := UpdateStatusRequestValidationError{
			field:  "StatusName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusRequestMultiError) AllErrors() []error { return m }

// UpdateStatusRequestValidationError is the validation error returned by
// UpdateStatusRequest.Validate if the designated constraints aren't met.
type UpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusRequestValidationError) ErrorName() string {
	return "UpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusRequestValidationError{}

// Validate checks the field values on UpdateStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatusResponseMultiError, or nil if none found.
func (m *UpdateStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusResponseMultiError) AllErrors() []error { return m }

// UpdateStatusResponseValidationError is the validation error returned by
// UpdateStatusResponse.Validate if the designated constraints aren't met.
type UpdateStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusResponseValidationError) ErrorName() string {
	return "UpdateStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusResponseValidationError{}

// Validate checks the field values on DeleteStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStatusRequestMultiError, or nil if none found.
func (m *DeleteStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusId() <= 0 {
		err := DeleteStatusRequestValidationError{
			field:  "StatusId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteStatusRequestMultiError(errors)
	}

	return nil
}

// DeleteStatusRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStatusRequestMultiError) AllErrors() []error { return m }

// DeleteStatusRequestValidationError is the validation error returned by
// DeleteStatusRequest.Validate if the designated constraints aren't met.
type DeleteStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStatusRequestValidationError) ErrorName() string {
	return "DeleteStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStatusRequestValidationError{}

// Validate checks the field values on DeleteStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStatusResponseMultiError, or nil if none found.
func (m *DeleteStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteStatusResponseMultiError(errors)
	}

	return nil
}

// DeleteStatusResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStatusResponseMultiError) AllErrors() []error { return m }

// DeleteStatusResponseValidationError is the validation error returned by
// DeleteStatusResponse.Validate if the designated constraints aren't met.
type DeleteStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStatusResponseValidationError) ErrorName() string {
	return "DeleteStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStatusResponseValidationError{}

// Validate checks the field values on GetStatusByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatusByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusByNameRequestMultiError, or nil if none found.
func (m *GetStatusByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetStatusName()) < 1 {
		err := GetStatusByNameRequestValidationError{
			field:  "StatusName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStatusByNameRequestMultiError(errors)
	}

	return nil
}

// GetStatusByNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetStatusByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStatusByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusByNameRequestMultiError) AllErrors() []error { return m }

// GetStatusByNameRequestValidationError is the validation error returned by
// GetStatusByNameRequest.Validate if the designated constraints aren't met.
type GetStatusByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusByNameRequestValidationError) ErrorName() string {
	return "GetStatusByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusByNameRequestValidationError{}

// Validate checks the field values on GetStatusByNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatusByNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusByNameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusByNameResponseMultiError, or nil if none found.
func (m *GetStatusByNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusByNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusId

	// no validation rules for StatusName

	if len(errors) > 0 {
		return GetStatusByNameResponseMultiError(errors)
	}

	return nil
}

// GetStatusByNameResponseMultiError is an error wrapping multiple validation
// errors returned by GetStatusByNameResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStatusByNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusByNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusByNameResponseMultiError) AllErrors() []error { return m }

// GetStatusByNameResponseValidationError is the validation error returned by
// GetStatusByNameResponse.Validate if the designated constraints aren't met.
type GetStatusByNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusByNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusByNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusByNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusByNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusByNameResponseValidationError) ErrorName() string {
	return "GetStatusByNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusByNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusByNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusByNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusByNameResponseValidationError{}

// Validate checks the field values on CheckStatusExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckStatusExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckStatusExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckStatusExistsRequestMultiError, or nil if none found.
func (m *CheckStatusExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckStatusExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusId() <= 0 {
		err := CheckStatusExistsRequestValidationError{
			field:  "StatusId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckStatusExistsRequestMultiError(errors)
	}

	return nil
}

// CheckStatusExistsRequestMultiError is an error wrapping multiple validation
// errors returned by CheckStatusExistsRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckStatusExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckStatusExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckStatusExistsRequestMultiError) AllErrors() []error { return m }

// CheckStatusExistsRequestValidationError is the validation error returned by
// CheckStatusExistsRequest.Validate if the designated constraints aren't met.
type CheckStatusExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckStatusExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckStatusExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckStatusExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckStatusExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckStatusExistsRequestValidationError) ErrorName() string {
	return "CheckStatusExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckStatusExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckStatusExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckStatusExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckStatusExistsRequestValidationError{}

// Validate checks the field values on CheckStatusExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckStatusExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckStatusExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckStatusExistsResponseMultiError, or nil if none found.
func (m *CheckStatusExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckStatusExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckStatusExistsResponseMultiError(errors)
	}

	return nil
}

// CheckStatusExistsResponseMultiError is an error wrapping multiple validation
// errors returned by CheckStatusExistsResponse.ValidateAll() if the
// designated constraints aren't met.
type CheckStatusExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckStatusExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckStatusExistsResponseMultiError) AllErrors() []error { return m }

// CheckStatusExistsResponseValidationError is the validation error returned by
// CheckStatusExistsResponse.Validate if the designated constraints aren't met.
type CheckStatusExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckStatusExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckStatusExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckStatusExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckStatusExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckStatusExistsResponseValidationError) ErrorName() string {
	return "CheckStatusExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckStatusExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckStatusExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckStatusExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckStatusExistsResponseValidationError{}

// Validate checks the field values on SetWorkerCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetWorkerCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetWorkerCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetWorkerCountRequestMultiError, or nil if none found.
func (m *SetWorkerCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetWorkerCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCount() <= 0 {
		err := SetWorkerCountRequestValidationError{
			field:  "Count",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetWorkerCountRequestMultiError(errors)
	}

	return nil
}

// SetWorkerCountRequestMultiError is an error wrapping multiple validation
// errors returned by SetWorkerCountRequest.ValidateAll() if the designated
// constraints aren't met.
type SetWorkerCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetWorkerCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetWorkerCountRequestMultiError) AllErrors() []error { return m }

// SetWorkerCountRequestValidationError is the validation error returned by
// SetWorkerCountRequest.Validate if the designated constraints aren't met.
type SetWorkerCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetWorkerCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetWorkerCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetWorkerCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetWorkerCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetWorkerCountRequestValidationError) ErrorName() string {
	return "SetWorkerCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetWorkerCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetWorkerCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetWorkerCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetWorkerCountRequestValidationError{}

// Validate checks the field values on SetWorkerCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetWorkerCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetWorkerCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetWorkerCountResponseMultiError, or nil if none found.
func (m *SetWorkerCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetWorkerCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewCount

	if len(errors) > 0 {
		return SetWorkerCountResponseMultiError(errors)
	}

	return nil
}

// SetWorkerCountResponseMultiError is an error wrapping multiple validation
// errors returned by SetWorkerCountResponse.ValidateAll() if the designated
// constraints aren't met.
type SetWorkerCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetWorkerCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetWorkerCountResponseMultiError) AllErrors() []error { return m }

// SetWorkerCountResponseValidationError is the validation error returned by
// SetWorkerCountResponse.Validate if the designated constraints aren't met.
type SetWorkerCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetWorkerCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetWorkerCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetWorkerCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetWorkerCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetWorkerCountResponseValidationError) ErrorName() string {
	return "SetWorkerCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetWorkerCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetWorkerCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetWorkerCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetWorkerCountResponseValidationError{}
